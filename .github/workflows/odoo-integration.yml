name: Odoo Integration Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-odoo-16:
    name: Test with Odoo 16
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: odoo
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install MCP server dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Pull Odoo 16 Docker image
        run: docker pull odoo:16

      - name: Start Odoo 16
        run: |
          docker run -d \
            --name odoo16 \
            --network host \
            -e HOST=localhost \
            -e PORT=8069 \
            -e USER=odoo \
            -e PASSWORD=odoo \
            odoo:16

          # Wait for Odoo to be ready (max 120 seconds)
          timeout=120
          while [ $timeout -gt 0 ]; do
            if curl -f http://localhost:8069/web/database/manager >/dev/null 2>&1; then
              echo "✅ Odoo is ready!"
              break
            fi
            echo "Waiting for Odoo to start... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout - 5))
          done

          if [ $timeout -le 0 ]; then
            echo "❌ Timeout waiting for Odoo to start"
            docker logs odoo16
            exit 1
          fi

      - name: Create test database
        run: |
          # Wait a bit more to ensure Odoo is fully initialized
          sleep 10

          # Try to create database via Odoo web service
          curl -X POST http://localhost:8069/web/database/create \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"call","params":{"master_pwd":"admin","name":"test_db","login":"admin","password":"admin","lang":"en_US"},"id":1}' \
            || echo "Database may already exist or creation not needed for XML-RPC"

      - name: Test MCP server connection to Odoo
        env:
          ODOO_URL: http://localhost:8069
          ODOO_DB: odoo
          ODOO_USERNAME: admin
          ODOO_PASSWORD: admin
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from odoo_mcp.odoo_client import get_odoo_client
          import os

          try:
              client = get_odoo_client()
              print('✅ Successfully connected to Odoo!')
              print(f'User ID: {client.uid}')

              # Test basic operations
              models = client.get_models()
              print(f'✅ Retrieved {len(models)} models')

              # Test res.partner
              partners = client.execute_method('res.partner', 'search_read', [], {'limit': 5})
              print(f'✅ Retrieved {len(partners)} partners')

          except Exception as e:
              print(f'❌ Error: {e}')
              sys.exit(1)
          "

      - name: Show Odoo logs on failure
        if: failure()
        run: docker logs odoo16

      - name: Cleanup
        if: always()
        run: docker stop odoo16 && docker rm odoo16

  test-odoo-17:
    name: Test with Odoo 17
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: odoo
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install MCP server dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Pull Odoo 17 Docker image
        run: docker pull odoo:17

      - name: Start Odoo 17
        run: |
          docker run -d \
            --name odoo17 \
            --network host \
            -e HOST=localhost \
            -e PORT=8069 \
            -e USER=odoo \
            -e PASSWORD=odoo \
            odoo:17

          # Wait for Odoo to be ready (max 120 seconds)
          timeout=120
          while [ $timeout -gt 0 ]; do
            if curl -f http://localhost:8069/web/database/manager >/dev/null 2>&1; then
              echo "✅ Odoo is ready!"
              break
            fi
            echo "Waiting for Odoo to start... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout - 5))
          done

          if [ $timeout -le 0 ]; then
            echo "❌ Timeout waiting for Odoo to start"
            docker logs odoo17
            exit 1
          fi

      - name: Test MCP server connection to Odoo
        env:
          ODOO_URL: http://localhost:8069
          ODOO_DB: odoo
          ODOO_USERNAME: admin
          ODOO_PASSWORD: admin
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from odoo_mcp.odoo_client import get_odoo_client
          import os

          try:
              client = get_odoo_client()
              print('✅ Successfully connected to Odoo!')
              print(f'User ID: {client.uid}')

              # Test basic operations
              models = client.get_models()
              print(f'✅ Retrieved {len(models)} models')

          except Exception as e:
              print(f'❌ Error: {e}')
              sys.exit(1)
          "

      - name: Show Odoo logs on failure
        if: failure()
        run: docker logs odoo17

      - name: Cleanup
        if: always()
        run: docker stop odoo17 && docker rm odoo17
